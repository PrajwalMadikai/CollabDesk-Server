name: CD - Deploy to Production (EC2 with Docker and Nginx)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t my-app:latest .

      # Step 3: Save the Docker image as a tar file
      - name: Save Docker image
        run: |
          docker save my-app:latest > my-app.tar

      # Step 4: Transfer the Docker image to EC2
      - name: Transfer Docker image to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "my-app.tar"
          target: "/home/ubuntu/app/my-app.tar"  # Transfer to /home/ubuntu/app/my-app.tar

      # Step 5: Deploy to EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            set -e  # Exit immediately if any command fails

            # Navigate to the app directory or create it if it doesn't exist
            cd /home/ubuntu/app || mkdir -p /home/ubuntu/app && cd $_

            # Debugging: List directory contents
            echo "Directory contents before loading Docker image:"
            ls -l /home/ubuntu/app/

            # Ensure the tar file exists
            if [ ! -f "/home/ubuntu/app/my-app.tar" ]; then
              echo "Error: /home/ubuntu/app/my-app.tar does not exist!"
              exit 1
            fi

            # Load the Docker image
            echo "Loading Docker image from /home/ubuntu/app/my-app.tar..."
            docker load < /home/ubuntu/app/my-app.tar

            # Stop and remove the existing container (if running)
            CONTAINER_ID=$(docker ps -q --filter "ancestor=my-app:latest")
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Stopping and removing existing container..."
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
            fi

            # Run the new container
            echo "Starting new container..."
            docker run -d \
              --name my-app-container \
              -p 8080:80 \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e MONGO_URI=${{ secrets.MONGO_URI }} \
              my-app:latest

            # Restart Nginx to apply changes
            echo "Restarting Nginx..."
            sudo systemctl restart nginx